# LoopSpot — Deep Links, Guest Flow & Modals

## Background
Originally, the app had a **single Home screen (`app/home.jsx`)** that both creators and guests used.  

- **Creators (loop owners)** needed to:
  - Create loops
  - Share links with friends
- **Guests (end users)** needed to:
  - Accept an invite
  - See loop details
  - Possibly add a location

### Problem
The **same home screen** was trying to serve both roles. Guests ended up seeing creator features (like “Create Loop”) that weren’t relevant to them. This created confusion.

---

## Goal
1. **Split the UX for creators and guests** so each sees only what they need.
2. **Enable deep links without a backend**, so guests can open an invite link and immediately see loop details.
3. **Introduce reusable modals** for creating and viewing loops.
4. Keep codebase **organized and scalable**.
5. Extend the **guest experience** to allow multi-pin workflows (with names & times), editing, and clearing locations.

---

## Final Flow

### Creator
- Starts in `/home.jsx`.
- Uses `CreateLoopModal` to create a loop.
- Loop is saved locally in `AsyncStorage`. 
- A deep link is generated:  
  `exp://<dev-server>/--/loop/<loopId>?d=<urlencoded JSON>`
- Creator shares the link.

### Guest
- Opens the deep link on their device.
- Lands on `/loop/[loopId].jsx` (Accept/Reject screen).
- Loop data is resolved from:
  - `AsyncStorage.getItem(loopId)`, or
  - the payload in the `?d=` query.
- On **Accept**, guest is redirected to `/guest-home.jsx`:
  ```js
  router.replace({
    pathname: '/guest-home',
    params: { loopId: String(loopId), d: d ? String(d) : '' },
  });


app/
  home.jsx                  # creator home (map + create loop modal)
  guest-home.jsx            # guest home (map + auto-open details modal + pins flow)
  loop/
    [loopId].jsx            # accept/reject invite screen
    utils/
      linkUtils.js          # getShareLink(), generateLoopId()
  components/
    CreateLoopModal.jsx     # modal for creating/sharing loops
    LoopDetailsModal.jsx    # modal for viewing loop details

### 🧠 Why This Structure?

- `app/` contains **navigable screens** (routes).
- `app/components/` contains **reusable UI components**, not routes.
- Initially, `CreateLoopModal` was incorrectly placed in `app/`, causing import issues. ✅ Fixed by moving it to `app/components/`.

---

## 🔑 Key Concepts

### 🚏 Expo Router

File-based navigation:

| File Path                  | Route         |
|---------------------------|---------------|
| `app/home.jsx`            | `/home`       |
| `app/guest-home.jsx`      | `/guest-home` |
| `app/loop/[loopId].jsx`   | `/loop/:loopId` |

Works seamlessly with Expo deep links:  
`exp://…/--/path`

---

### 🔗 Deep Linking

- Use `Linking.createURL('/loop/<id>')` to generate links.
- Append `?d=<urlencoded JSON>` to embed loop details (no backend required).
- Guests decode this payload locally.

---

### 💾 AsyncStorage

Local key–value storage (similar to `localStorage` in React Native).

Used to:
- Save created loops under `loopId`.
- Retrieve loop data when a guest accepts.

Potential future use:
- Store `userRole` (creator / guest) for auto-routing.

---

## 🛠 Step-by-Step Implementation

### 1. Accept/Reject Screen (`app/loop/[loopId].jsx`)

- Handles invite links.
- Loads loop data from AsyncStorage or `?d` payload.
- Displays loop info and Accept / Reject buttons.
- On Accept → redirects to `/guest-home`.

---

### 2. Guest Home (`app/guest-home.jsx`)

Guest landing screen after accepting an invite.

#### 🗺 Map Features:
- Current location
- Saved pins

#### 🔄 On Mount:
- Resolves loop data (AsyncStorage → payload).
- Auto-opens `LoopDetailsModal`.

#### ➕ Multi-Pin Add Flow:
1. Guest enters number of pins in `LoopDetailsModal` (e.g., 2).
2. Enters add-mode:
   - Remaining count displayed.
   - Guest long-presses map to drop a pending pin.
   - A card pops up to enter Name and Time to stay.
3. On Add:
   - Pin is persisted.
   - Count decrements.
4. When all pins are placed:
   - Add-mode ends silently.
   - Pins remain visible on map.

#### ✏️ Editing Pins:
- Tap an existing pin → opens Edit card.
- Update Name and Time → Save.
- Changes persisted to AsyncStorage.

#### 🧹 Clearing Pins:
- Floating red “Remove all pins” button clears all pins from the loop.

---

### 3. LoopDetailsModal (`app/components/LoopDetailsModal.jsx`)

Reusable modal for loop details.

- Input for Add Location Number.
- “Add Location” button passes count back to `guest-home` to trigger add-mode.
- Can be extended for both creators & guests.

---

### 4. CreateLoopModal (`app/components/CreateLoopModal.jsx`)

Modal for creators to:
- Create a new loop
- Generate deep links

✅ Correctly located under `app/components/`.

---

## 🎬 Demo Flow (Guest)

1. Guest opens invite link.
2. Accepts invite → lands on `/guest-home`.
3. `LoopDetailsModal` opens:
   - Enters `2` → taps “Add Location”.
4. On map:
   - Long-press → enters *Hall*, 30 min → taps Add.
   - Long-press again → enters *Cafe*, 45 min → taps Add.
5. Done! Two pins appear on map with details.
6. Later:
   - Taps a pin → edits name/time.
   - Or clears all pins via the “Remove all pins” button.
